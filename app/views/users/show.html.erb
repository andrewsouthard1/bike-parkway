<div id="app">
  <%= @user.email %>
  <div id="userId"><%= @user.id %></div>

  <div v-for="ride in inProgressRides">
    <div class="in-progress-bar">
      <span>{{ ride.starting_location }}</span>
      <span>{{ ride.ending_location }}</span>
      <span>{{ ride.created_at }}</span>
      <span>{{ ride.miles }} Miles</span>
      <span>{{ ride.in_progress }}</span>
      <button class="btn in-progress-button" v-on:click="finishRide(ride)"><i class="fa fa-flag-checkered fa-fw" aria-hidden="true"></i>
    </div>
  </div>
  <div id="userMilesBox">
    {{ miles }} MI
  </div>
  <div class="sort-button-row">
    <span v-on:click="makeMilesBoxLifetime() + makeRankingsLifetime()" id="lifetime-button" class="selected-miles"> Lifetime</span>
    <span v-on:click="makeMilesBoxWeekly() + makeRankingsWeekly()" id="weekly-button"> Weekly</span>
    <span v-on:click="makeMilesBoxDaily() + makeRankingsDaily()" id="today-button"> Today</span>
  </div>
  <a href="/rides" class="btn btn-block bike-button"><i class="fa fa-bicycle fa-2x"></i></a>
  <div id="friend-box">
    <p class="friend-box-header">Rankings</p>
      <div v-for="(friend, index) in sortedFriends">
        <div id="rankings">
          <p v-if="firstPlace(index)">
            {{ friend.firstName }} {{ friend.miles }}
            <i class="fa fa-trophy" aria-hidden="true"></i>
          </p>
          <p v-else>
            {{ friend.firstName }} {{ friend.miles }}
          </p>
        </div>
      </div>
  </div>
</div>
<footer class="footer">
  <% if current_user %>
    <a href="/users">Make Friends</a>
    <span class="chain-link">-</span>
    <a href="/rides">New Ride</a>
    <span class="chain-link">-</span>
    <a href="/logout">Log Out</a>
  <% else %>
    <a href="/signup">Sign Up</a>
  <% end %>
</footer>
<div id='visMap'></div>
<button id="lastRide">Last Ride</button>
<script>
mapboxgl.accessToken = "<%= ENV['MAP_BOX_API'] %>";
var start = [-74.0066, 40.7135];
var end = [74.50, 40];

var map = new mapboxgl.Map({
  style: 'mapbox://styles/mapbox/light-v9',
  center: start,
  zoom: 15,
  pitch: 45,
  bearing: -17.6,
  container: 'visMap'
});

// the 'building' layer in the mapbox-streets vector source contains building-height
// data from OpenStreetMap.
map.on('load', function() {
  map.addLayer({
    'id': '3d-buildings',
    'source': 'composite',
    'source-layer': 'building',
    'filter': ['==', 'extrude', 'true'],
    'type': 'fill-extrusion',
    'minzoom': 15,
    'paint': {
      'fill-extrusion-color': '#aaa',
      'fill-extrusion-height': {
        'type': 'identity',
        'property': 'height'
      },
      'fill-extrusion-base': {
        'type': 'identity',
        'property': 'min_height'
      },
      'fill-extrusion-opacity': .6
    }
  });
});

var isAtStart = true;

document.getElementById('lastRide').addEventListener('click', function() {
    // depending on whether we're currently at point a or b, aim for
    // point a or b
    var target = isAtStart ? end : start;

    // and now we're at the opposite point
    isAtStart = !isAtStart;

    map.flyTo({
        // These options control the ending camera position: centered at
        // the target, at zoom level 9, and north up.
        center: target,
        zoom: 15,
        bearing: -17.6,

        // These options control the flight curve, making it move
        // slowly and zoom out almost completely before starting
        // to pan.
        speed: 0.2, // make the flying slow
        curve: 1, // change the speed at which it zooms out


        // This can be any easing function: it takes a number between
        // 0 and 1 and returns another number between 0 and 1.
        easing: function (t) {
            return t;
        }
    });
});

</script>
